{"version":3,"sources":["components/Password.jsx","components/Email.jsx","pages/LoginRegister.jsx","pages/Dashboard.jsx","components/Authentication.jsx","App.js","serviceWorker.js","index.js"],"names":["Password","props","useState","showPassword","setShowPassword","handleShowPassword","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","type","value","onChange","e","target","autoComplete","required","Prepend","Text","id","icon","faEyeSlash","onClick","faEye","Email","LoginRegister","login","setLogin","email","setEmail","password","setPassword","error","setError","successRegistration","setSuccessRegistration","history","useHistory","classNavigation","Alert","variant","dismissible","onClose","style","display","faUsers","Form","onSubmit","preventDefault","url","axios","post","process","PORT","then","res","localStorage","setItem","data","push","setTimeout","catch","response","Button","Dashboard","Authentication","undefined","user","setUser","useEffect","jwt","getItem","get","headers","children","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.329ecadc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { InputGroup, FormControl } from \"react-bootstrap\";\r\nimport \"./Password.scss\";\r\nconst Password = props => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const handleShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n  return (\r\n    <div>\r\n      <InputGroup className=\"mb-3\">\r\n        <FormControl\r\n          placeholder=\"Password\"\r\n          aria-label=\"Password\"\r\n          aria-describedby=\"basic-addon1\"\r\n          type={showPassword ? \"text\" : \"password\"}\r\n          value={props.value}\r\n          onChange={e => {\r\n            props.onChange(e.target.value);\r\n          }}\r\n          autoComplete=\"current-password\"\r\n          required\r\n        />\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text id=\"basic-addon1\">\r\n            {showPassword ? (\r\n              <FontAwesomeIcon\r\n                icon={faEyeSlash}\r\n                className=\"eyeIcon\"\r\n                onClick={handleShowPassword}\r\n              />\r\n            ) : (\r\n              <FontAwesomeIcon\r\n                icon={faEye}\r\n                className=\"eyeIcon\"\r\n                onClick={handleShowPassword}\r\n              />\r\n            )}\r\n          </InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n      </InputGroup>\r\n    </div>\r\n  );\r\n};\r\nexport default Password;\r\n","import React from \"react\";\r\nimport { InputGroup, FormControl } from \"react-bootstrap\";\r\nimport \"./Email.scss\";\r\nconst Email = props => {\r\n  return (\r\n    <InputGroup className=\"mb-3\">\r\n      <InputGroup.Prepend>\r\n        <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      <FormControl\r\n        placeholder=\"Email\"\r\n        aria-label=\"Email\"\r\n        aria-describedby=\"basic-addon1\"\r\n        value={props.value}\r\n        onChange={e => {\r\n          props.onChange(e.target.value);\r\n        }}\r\n        autoComplete=\"username\"\r\n        required\r\n      />\r\n    </InputGroup>\r\n  );\r\n};\r\nexport default Email;\r\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Form, Alert } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUsers } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Password from \"../components/Password.jsx\";\nimport Email from \"../components/Email.jsx\";\n\nimport axios from \"axios\";\nimport \"./LoginRegister.scss\";\nexport default function LoginRegister() {\n  //if login == false, then show register form\n  const [login, setLogin] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [successRegistration, setSuccessRegistration] = useState(false);\n  const history = useHistory();\n\n  const handleNavigation = () => {\n    setLogin(!login);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let url = login ? \"login\" : \"register\";\n    axios\n      .post(`http://localhost:${process.env.PORT}/auth/${url}`, {\n        email: email,\n        password: password\n      })\n      .then(\n        url === \"login\"\n          ? res => {\n              localStorage.setItem(\"auth-token\", res.data);\n              history.push(\"/dashboard\");\n            }\n          : () => {\n              setSuccessRegistration(true);\n              setLogin(true);\n              setTimeout(() => {\n                setSuccessRegistration(false);\n              }, 4000);\n            }\n      )\n      .catch(function(error) {\n        if (error.response) {\n          setError(error.response.data);\n          setTimeout(() => {\n            setError(\"\");\n          }, 4000);\n        }\n      });\n  };\n\n  //Dynamically changing style of sideNavigation\n  const rightLeft = login ? \"rightSide\" : \"leftSide\";\n  const classNavigation = `Navigation ${rightLeft}`;\n\n  return (\n    <div className=\"LoginRegister\">\n      <div className=\"Background\" />\n      <Alert\n        variant=\"warning\"\n        dismissible\n        onClose={() => {\n          setError(\"\");\n        }}\n        style={error !== \"\" ? { display: \"block\" } : { display: \"none\" }}\n      >\n        {error}\n      </Alert>\n      <Alert\n        variant=\"success\"\n        style={successRegistration ? { display: \"block\" } : { display: \"none\" }}\n      >\n        You've been successfully registered!\n      </Alert>\n      <div className=\"Form\">\n        <div className={classNavigation} onClick={handleNavigation}>\n          <span>{login ? \"Register\" : \"Log in \"}</span>\n        </div>\n        <h2 className=\"header mb-4 pt-5 text-center\">\n          {login ? \"LOG IN\" : \"REGISTER\"}\n        </h2>\n        <FontAwesomeIcon icon={faUsers} className=\"usersIcon\" />\n        <Form onSubmit={handleSubmit}>\n          <Email value={email} onChange={setEmail} />\n          <Password value={password} onChange={setPassword} />\n          <Button variant=\"dark\" type=\"submit\">\n            {login ? \"Log in \" : \"Register\"}\n          </Button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\r\n\r\nconst Dashboard = () => {\r\n  return <h1>Welcome to Dashboard</h1>;\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst Authentication = props => {\r\n  const [user, setUser] = useState(undefined);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const jwt = localStorage.getItem(\"auth-token\");\r\n    //If user doesn't have jwt token\r\n    if (!jwt) history.push(\"/login\");\r\n\r\n    //Verify the token\r\n    axios.get('/protected', {headers: {\"auth-token\": jwt}}).then(res => setUser(res.data))\r\n  // eslint-disable-next-line\r\n  },[]);\r\n  if (user === undefined) {\r\n    return (\r\n      <div>\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>{props.children}</div>;\r\n};\r\nexport default Authentication;\r\n","import React from \"react\";\r\nimport LoginRegister from \"./pages/LoginRegister.jsx\";\r\nimport Dashboard from \"./pages/Dashboard.jsx\";\r\nimport Authentication from \"./components/Authentication.jsx\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n    <Switch>\r\n      <Route exact path=\"/login\" component={LoginRegister} />\r\n      <Authentication>\r\n        <Route exact path=\"/dashboard\" component={Dashboard} />\r\n      </Authentication>\r\n    </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}