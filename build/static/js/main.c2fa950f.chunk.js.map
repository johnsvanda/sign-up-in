{"version":3,"sources":["components/Password.jsx","components/Email.jsx","serviceWorker.js","index.js","App.js"],"names":["Password","props","useState","showPassword","setShowPassword","handleShowPassword","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","type","value","onChange","e","target","required","Prepend","Text","id","icon","faEyeSlash","onClick","faEye","Email","Boolean","window","location","hostname","match","ReactDOM","render","login","setLogin","email","setEmail","password","setPassword","classes","faUsers","Form","onSubmit","preventDefault","url","axios","post","then","response","console","log","catch","error","Button","variant","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SA6CeA,G,MAxCE,SAAAC,GAAU,IAAD,EACgBC,oBAAS,GADzB,mBACjBC,EADiB,KACHC,EADG,KAElBC,EAAqB,WACzBD,GAAiBD,IAEnB,OACE,6BACE,kBAACG,EAAA,EAAD,CAAYC,UAAU,QACpB,kBAACC,EAAA,EAAD,CACEC,YAAY,WACZC,aAAW,WACXC,mBAAiB,eACjBC,KAAMT,EAAe,OAAS,WAC9BU,MAAOZ,EAAMY,MACbC,SAAU,SAAAC,GACRd,EAAMa,SAASC,EAAEC,OAAOH,QAE1BI,UAAQ,IAEV,kBAACX,EAAA,EAAWY,QAAZ,KACE,kBAACZ,EAAA,EAAWa,KAAZ,CAAiBC,GAAG,gBACjBjB,EACC,kBAAC,IAAD,CACEkB,KAAMC,IACNf,UAAU,UACVgB,QAASlB,IAGX,kBAAC,IAAD,CACEgB,KAAMG,IACNjB,UAAU,UACVgB,QAASlB,UCdVoB,G,MAnBD,SAAAxB,GACZ,OACE,kBAACK,EAAA,EAAD,CAAYC,UAAU,QACpB,kBAACD,EAAA,EAAWY,QAAZ,KACE,kBAACZ,EAAA,EAAWa,KAAZ,CAAiBC,GAAG,gBAApB,MAEF,kBAACZ,EAAA,EAAD,CACEC,YAAY,QACZC,aAAW,QACXC,mBAAiB,eACjBE,MAAOZ,EAAMY,MACbC,SAAU,SAAAC,GACRd,EAAMa,SAASC,EAAEC,OAAOH,QAE1BI,UAAQ,O,6BCLIS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCID,WAAe,MAEF9B,oBAAS,GAFP,mBAErB+B,EAFqB,KAEdC,EAFc,OAGFhC,mBAAS,IAHP,mBAGrBiC,EAHqB,KAGdC,EAHc,OAIIlC,mBAAS,IAJb,mBAIrBmC,EAJqB,KAIXC,EAJW,KA2BtBC,EAAO,qBADKN,EAAQ,YAAc,YAExC,OACE,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,eACf,yBAAKA,UAAU,QACb,yBAAKA,UAAWgC,EAAShB,QA1BN,WACvBW,GAAUD,KA0BJ,8BAAOA,EAAQ,WAAa,YAE9B,wBAAI1B,UAAU,gCACX0B,EAAQ,SAAW,YAEtB,kBAAC,IAAD,CAAiBZ,KAAMmB,IAASjC,UAAU,cAC1C,kBAACkC,EAAA,EAAD,CAAMC,SA7BS,SAAA3B,GACnBA,EAAE4B,iBACF,IAAIC,EAAMX,EAAQ,QAAU,WAC5BY,IACGC,KADH,gCACiCF,GAAO,CACpCT,MAAOA,EACPE,SAAUA,IAEXU,MAAK,SAASC,GACbC,QAAQC,IAAIF,MAEbG,OAAM,SAASC,GACdH,QAAQC,IAAIE,QAkBV,kBAAC,EAAD,CAAOvC,MAAOsB,EAAOrB,SAAUsB,IAC/B,kBAAC,EAAD,CAAUvB,MAAOwB,EAAUvB,SAAUwB,IACrC,kBAACe,EAAA,EAAD,CAAQC,QAAQ,OAAO1C,KAAK,UACzBqB,EAAQ,UAAY,iBD/CjB,MAASsB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMZ,MAAK,SAAAa,GACjCA,EAAaC,kB","file":"static/js/main.c2fa950f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { InputGroup, FormControl } from \"react-bootstrap\";\r\nimport \"./Password.scss\";\r\nconst Password = props => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const handleShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n  return (\r\n    <div>\r\n      <InputGroup className=\"mb-3\">\r\n        <FormControl\r\n          placeholder=\"Password\"\r\n          aria-label=\"Password\"\r\n          aria-describedby=\"basic-addon1\"\r\n          type={showPassword ? \"text\" : \"password\"}\r\n          value={props.value}\r\n          onChange={e => {\r\n            props.onChange(e.target.value);\r\n          }}\r\n          required\r\n        />\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text id=\"basic-addon1\">\r\n            {showPassword ? (\r\n              <FontAwesomeIcon\r\n                icon={faEyeSlash}\r\n                className=\"eyeIcon\"\r\n                onClick={handleShowPassword}\r\n              />\r\n            ) : (\r\n              <FontAwesomeIcon\r\n                icon={faEye}\r\n                className=\"eyeIcon\"\r\n                onClick={handleShowPassword}\r\n              />\r\n            )}\r\n          </InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n      </InputGroup>\r\n    </div>\r\n  );\r\n};\r\nexport default Password;\r\n","import React from \"react\";\r\nimport { InputGroup, FormControl } from \"react-bootstrap\";\r\nimport \"./Email.scss\";\r\nconst Email = props => {\r\n  return (\r\n    <InputGroup className=\"mb-3\">\r\n      <InputGroup.Prepend>\r\n        <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      <FormControl\r\n        placeholder=\"Email\"\r\n        aria-label=\"Email\"\r\n        aria-describedby=\"basic-addon1\"\r\n        value={props.value}\r\n        onChange={e => {\r\n          props.onChange(e.target.value);\r\n        }}\r\n        required\r\n      />\r\n    </InputGroup>\r\n  );\r\n};\r\nexport default Email;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUsers } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Password from \"./components/Password.jsx\";\nimport Email from \"./components/Email.jsx\";\n\nimport axios from \"axios\";\nimport \"./App.scss\";\nexport default function App() {\n  //if login == false, then show register form\n  const [login, setLogin] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleNavigation = () => {\n    setLogin(!login);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let url = login ? \"login\" : \"register\";\n    axios\n      .post(`http://localhost:8080/${url}`, {\n        email: email,\n        password: password\n      })\n      .then(function(response) {\n        console.log(response);\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  };\n\n  const rightLeft = login ? \"rightSide\" : \"leftSide\";\n  const classes = `Navigation ${rightLeft}`;\n  return (\n    <div className=\"App\">\n      <div className=\"Background\" />\n      <div className=\"Form\">\n        <div className={classes} onClick={handleNavigation}>\n          <span>{login ? \"Register\" : \"Log in \"}</span>\n        </div>\n        <h2 className=\"header mb-4 pt-5 text-center\">\n          {login ? \"LOG IN\" : \"REGISTER\"}\n        </h2>\n        <FontAwesomeIcon icon={faUsers} className=\"usersIcon\" />\n        <Form onSubmit={handleSubmit}>\n          <Email value={email} onChange={setEmail} />\n          <Password value={password} onChange={setPassword} />\n          <Button variant=\"dark\" type=\"submit\">\n            {login ? \"Log in \" : \"Register\"}\n          </Button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}